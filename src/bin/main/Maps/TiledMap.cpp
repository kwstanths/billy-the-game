#include "TiledMap.hpp"

#include <fstream>

#include "game_engine/graphics/GraphicsObject.hpp"
#include "game_engine/utility/BasicFunctions.hpp"

namespace ge = game_engine;

TiledMap::TiledMap() {

}

int TiledMap::Init(std::string map_name) {

    /* Initialize the static map objects, as generated by the prepare_map_files executable */
    {
        game_engine::graphics::GraphicsObject::InitObjectAtlas(map_name + ".obj");
    }

    /* Read static map objects */
    {
        /* Read tile-position correspondence file */
        std::vector<std::vector<std::string>> tile_map;
        std::string line;
        std::ifstream myfile(map_name + "_packed_map_tiles.txt");
        if (myfile.is_open()) {
            while (getline(myfile, line)) {
                tile_map.push_back(game_engine::utility::split(line, " "));
            }
            myfile.close();
        }
        else {
            dt::Console(dt::WARNING, map_name + "_packed_map_tiles.txt");
            return -1;
        }

        /* Store correspondence of big map regions to positions in the world */
        for (size_t i = 0; i < tile_map.size(); i++) {
            ge::Real_t x = std::stof(tile_map[i][0]);
            ge::Real_t y = std::stof(tile_map[i][1]);
            std::string name = tile_map[i][2];
            packed_tiles_.push_back(std::make_pair(ge::math::Vector3D(x, y, 0), name));
        }
    }

    return 0;
}

int TiledMap::Destroy()
{
    return 0;
}

void TiledMap::GetXYFromTiled(int i, int j, float & x, float & y) {
    x = j;
    y = -i;
}

int TiledMap::ReadMap(std::string name, std::vector<std::vector<std::string>>& map)
{
    std::string line;
    std::ifstream myfile(name);
    if (myfile.is_open()) {
        while (getline(myfile, line)) {
            map.push_back(ge::utility::split(line, ","));
        }
        myfile.close();
    } else {
        dt::Console(dt::WARNING, "Can't open file: " + name);
        return -1;
    }

    return 0;
}

